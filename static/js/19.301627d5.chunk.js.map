{"version":3,"sources":["../node_modules/codemirror/mode/ruby/ruby.js","../node_modules/codemirror/mode/haml/haml.js"],"names":["CodeMirror","defineMode","config","wordObj","words","o","i","e","length","curPunc","keywords","indentWords","dedentWords","opening","closing","chain","newtok","stream","state","tokenize","push","tokenBase","sol","match","eol","readBlockComment","eatSpace","m","phrase","mayIndent","ch","next","readQuoted","start","pos","depth","found","escaped","indexOf","backUp","regexpAhead","style","embed","eat","delim","propertyIsEnumerable","skipToEnd","pop","eatWhile","test","varList","lastTok","more","tokenBaseUntilBrace","peek","tokenBaseOnce","alreadyCalled","quote","unescaped","context","type","prev","startState","indented","indentUnit","continuedLine","token","indentation","kwtype","thisTok","word","current","column","indent","textAfter","Pass","firstChar","charAt","ct","closed","electricInput","lineComment","fold","defineMIME","mod","require","htmlMode","getMode","name","rubyMode","rubyInQuote","endQuote","rubyState","html","ruby","previousToken","startOfLine","htmlState","copyState"],"mappings":"yHAUG,SAASA,GACZ,aAEAA,EAAWC,WAAW,QAAQ,SAASC,GACrC,SAASC,EAAQC,GAEf,IADA,IAAIC,EAAI,GACCC,EAAI,EAAGC,EAAIH,EAAMI,OAAQF,EAAIC,IAAKD,EAAGD,EAAED,EAAME,KAAM,EAC5D,OAAOD,EAET,IAaII,EAbAC,EAAWP,EAAQ,CACrB,QAAS,MAAO,QAAS,QAAS,QAAS,OAAQ,QAAS,MAAO,WAAY,KAAM,OACrF,QAAS,MAAO,MAAO,SAAU,QAAS,MAAO,KAAM,KAAM,SAAU,OAAQ,MAAO,KACtF,OAAQ,SAAU,QAAS,SAAU,OAAQ,QAAS,OAAQ,OAAQ,QAAS,SAC/E,QAAS,OAAQ,QAAS,QAAS,MAAO,QAAS,QAAS,QAAS,OAAQ,OAAQ,SACrF,SAAU,SAAU,OAAQ,SAAU,YAAa,UAAW,UAAW,OACzE,mBAAoB,SAAU,WAAY,UAAW,WAAY,WAAY,YAE3EQ,EAAcR,EAAQ,CAAC,MAAO,QAAS,OAAQ,MAAO,QAAS,QAAS,SAAU,OAC3D,QAAS,OAAQ,OAAQ,UAChDS,EAAcT,EAAQ,CAAC,MAAO,UAC9BU,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KACpCC,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAGxC,SAASC,EAAMC,EAAQC,EAAQC,GAE7B,OADAA,EAAMC,SAASC,KAAKJ,GACbA,EAAOC,EAAQC,GAGxB,SAASG,EAAUJ,EAAQC,GACzB,GAAID,EAAOK,OAASL,EAAOM,MAAM,WAAaN,EAAOO,MAEnD,OADAN,EAAMC,SAASC,KAAKK,GACb,UAET,GAAIR,EAAOS,WAAY,OAAO,KAC9B,IAAwBC,EA8KLC,EAAQC,EA9KvBC,EAAKb,EAAOc,OAChB,GAAU,KAAND,GAAmB,KAANA,GAAmB,KAANA,EAC5B,OAAOf,EAAMiB,EAAWF,EAAI,SAAgB,KAANA,GAAmB,KAANA,GAAYb,EAAQC,GAClE,GAAU,KAANY,EACT,OA0FJ,SAAqBb,GAEnB,IADA,IAAmCc,EAA/BE,EAAQhB,EAAOiB,IAAKC,EAAQ,EAASC,GAAQ,EAAOC,GAAU,EACjC,OAAzBN,EAAOd,EAAOc,SACpB,GAAKM,EAYHA,GAAU,MAZE,CACZ,GAAI,MAAMC,QAAQP,IAAS,EACzBI,SACK,GAAI,MAAMG,QAAQP,IAAS,GAEhC,KADAI,EACY,EAAG,WACV,GAAY,KAARJ,GAAwB,GAATI,EAAY,CACpCC,GAAQ,EACR,MAEFC,EAAkB,MAARN,EAMd,OADAd,EAAOsB,OAAOtB,EAAOiB,IAAMD,GACpBG,EA7GDI,CAAYvB,GACPF,EAAMiB,EAAWF,EAAI,YAAY,GAAOb,EAAQC,GAEhD,WACJ,GAAU,KAANY,EAAW,CACpB,IAAIW,EAAQ,SAAUC,GAAQ,EAC1BzB,EAAO0B,IAAI,KAAMF,EAAQ,OACpBxB,EAAO0B,IAAI,QAASF,EAAQ,SAC5BxB,EAAO0B,IAAI,OAAQF,EAAQ,WAC3BxB,EAAO0B,IAAI,WAAYF,EAAQ,SAAUC,GAAQ,GAC1D,IAAIE,EAAQ3B,EAAO0B,IAAI,YACvB,OAAKC,GACD/B,EAAQgC,qBAAqBD,KAAQA,EAAQ/B,EAAQ+B,IAClD7B,EAAMiB,EAAWY,EAAOH,EAAOC,GAAO,GAAOzB,EAAQC,IAFzC,WAGd,GAAU,KAANY,EAET,OADAb,EAAO6B,YACA,UACF,GAAU,KAANhB,IAAcH,EAAIV,EAAOM,MAAM,qDACxC,OAAOR,GAwJUa,EAxJQD,EAAE,GAwJFE,EAxJMF,EAAE,GAyJ5B,SAASV,EAAQC,GAItB,OAHIW,GAAWZ,EAAOS,WAClBT,EAAOM,MAAMK,GAASV,EAAMC,SAAS4B,MACpC9B,EAAO6B,YACL,WA7J+B7B,EAAQC,GACzC,GAAU,KAANY,EAIT,OAHIb,EAAO0B,IAAI,KAAM1B,EAAO+B,SAAS,cAC5B/B,EAAO0B,IAAI,KAAM1B,EAAO+B,SAAS,QACrC/B,EAAO+B,SAAS,SACd,SACF,GAAI,KAAKC,KAAKnB,GAEnB,OADAb,EAAOM,MAAM,6CACN,SACF,GAAU,KAANO,EAAW,CACpB,KAAOb,EAAOM,MAAM,cAGpB,OAFIN,EAAO0B,IAAI,MAAO1B,EAAO+B,SAAS,MACjC/B,EAAOc,OACL,SACF,GAAU,KAAND,EACT,OAAIb,EAAO0B,IAAI,KAAa5B,EAAMiB,EAAW,IAAK,QAAQ,GAAQf,EAAQC,GACtED,EAAO0B,IAAI,KAAa5B,EAAMiB,EAAW,IAAK,QAAQ,GAAOf,EAAQC,GAGrED,EAAO0B,IAAI,WACb1B,EAAO0B,IAAI,UACJ,QAIL1B,EAAO0B,IAAI,sBACN,OAIL1B,EAAO0B,IAAI,2BACb1B,EAAO+B,SAAS,oBAEhB/B,EAAO0B,IAAI,YACJ,QAEF,WACF,GAAU,KAANb,GAAab,EAAOM,MAAM,2BAGnC,OAFAN,EAAO0B,IAAI,KACX1B,EAAO+B,SAAS,mBACT,aACF,GAAU,KAANlB,EAQT,OAPIb,EAAO0B,IAAI,aACb1B,EAAO+B,SAAS,QACP/B,EAAO0B,IAAI,MACpB1B,EAAO0B,IAAI,MAEX1B,EAAOc,OAEF,aACF,GAAI,uBAAuBkB,KAAKnB,GAGrC,OAFAb,EAAO+B,SAAS,mBAChB/B,EAAO0B,IAAI,UACP1B,EAAO0B,IAAI,KAAa,OACrB,QACF,GAAU,KAANb,IAAcZ,EAAMgC,SAA4B,KAAjBhC,EAAMiC,SAAmC,MAAjBjC,EAAMiC,QAGjE,IAAI,kBAAkBF,KAAKnB,GAEhC,OADArB,EAAUqB,EACH,KACF,GAAU,KAANA,GAAab,EAAO0B,IAAI,KACjC,MAAO,QACF,GAAI,qBAAqBM,KAAKnB,GAAK,CACxC,IAAIsB,EAAOnC,EAAO+B,SAAS,sBAE3B,MADU,KAANlB,GAAcsB,IAAM3C,EAAU,KAC3B,WAEP,OAAO,KAXP,OADAA,EAAU,IACH,KAqCX,SAAS4C,EAAoBlB,GAE3B,OADKA,IAAOA,EAAQ,GACb,SAASlB,EAAQC,GACtB,GAAqB,KAAjBD,EAAOqC,OAAe,CACxB,GAAa,GAATnB,EAEF,OADAjB,EAAMC,SAAS4B,MACR7B,EAAMC,SAASD,EAAMC,SAASX,OAAO,GAAGS,EAAQC,GAEvDA,EAAMC,SAASD,EAAMC,SAASX,OAAS,GAAK6C,EAAoBlB,EAAQ,OAEhD,KAAjBlB,EAAOqC,SAChBpC,EAAMC,SAASD,EAAMC,SAASX,OAAS,GAAK6C,EAAoBlB,EAAQ,IAE1E,OAAOd,EAAUJ,EAAQC,IAG7B,SAASqC,IACP,IAAIC,GAAgB,EACpB,OAAO,SAASvC,EAAQC,GACtB,OAAIsC,GACFtC,EAAMC,SAAS4B,MACR7B,EAAMC,SAASD,EAAMC,SAASX,OAAO,GAAGS,EAAQC,KAEzDsC,GAAgB,EACTnC,EAAUJ,EAAQC,KAG7B,SAASc,EAAWyB,EAAOhB,EAAOC,EAAOgB,GACvC,OAAO,SAASzC,EAAQC,GACtB,IAAqBY,EAAjBO,GAAU,EAOd,IAL2B,uBAAvBnB,EAAMyC,QAAQC,OAChB1C,EAAMyC,QAAUzC,EAAMyC,QAAQE,KAC9B5C,EAAO0B,IAAI,MAGkB,OAAvBb,EAAKb,EAAOc,SAAiB,CACnC,GAAID,GAAM2B,IAAUC,IAAcrB,GAAU,CAC1CnB,EAAMC,SAAS4B,MACf,MAEF,GAAIL,GAAe,KAANZ,IAAcO,EAAS,CAClC,GAAIpB,EAAO0B,IAAI,KAAM,CACN,KAATc,IACFvC,EAAMyC,QAAU,CAACE,KAAM3C,EAAMyC,QAASC,KAAM,uBAE9C1C,EAAMC,SAASC,KAAKiC,KACpB,MACK,GAAI,QAAQJ,KAAKhC,EAAOqC,QAAS,CACtCpC,EAAMC,SAASC,KAAKmC,KACpB,OAGJlB,GAAWA,GAAiB,MAANP,EAExB,OAAOW,GAWX,SAAShB,EAAiBR,EAAQC,GAIhC,OAHID,EAAOK,OAASL,EAAOM,MAAM,SAAWN,EAAOO,OACjDN,EAAMC,SAAS4B,MACjB9B,EAAO6B,YACA,UAGT,MAAO,CACLgB,WAAY,WACV,MAAO,CAAC3C,SAAU,CAACE,GACX0C,SAAU,EACVJ,QAAS,CAACC,KAAM,MAAOG,UAAW7D,EAAO8D,YACzCC,eAAe,EACfd,QAAS,KACTD,SAAS,IAGnBgB,MAAO,SAASjD,EAAQC,GACtBT,EAAU,KACNQ,EAAOK,QAAOJ,EAAM6C,SAAW9C,EAAOkD,eAC1C,IAAoEC,EAAhE3B,EAAQvB,EAAMC,SAASD,EAAMC,SAASX,OAAO,GAAGS,EAAQC,GACxDmD,EAAU5D,EACd,GAAa,SAATgC,EAAkB,CACpB,IAAI6B,EAAOrD,EAAOsD,UAML,YALb9B,EAAyB,KAAjBvB,EAAMiC,QAAiB,WAC3BzC,EAASmC,qBAAqB5B,EAAOsD,WAAa,UAClD,SAAStB,KAAKqB,GAAQ,MACJ,OAAjBpD,EAAMiC,SAAqC,SAAjBjC,EAAMiC,SAAsBjC,EAAMgC,QAAW,MACxE,cAEFmB,EAAUC,EACN3D,EAAYkC,qBAAqByB,GAAOF,EAAS,SAC5CxD,EAAYiC,qBAAqByB,GAAOF,EAAS,SACxC,MAARE,GAAwB,UAARA,GAAqBrD,EAAOuD,UAAYvD,EAAOkD,cAExD,MAARG,GAAgBpD,EAAMyC,QAAQI,SAAW7C,EAAM6C,WACtDK,EAAS,UAFTA,EAAS,UAef,OAVI3D,GAAYgC,GAAkB,WAATA,KAAqBvB,EAAMiC,QAAUkB,GAC/C,KAAX5D,IAAgBS,EAAMgC,SAAWhC,EAAMgC,SAE7B,UAAVkB,GAAsB,WAAWnB,KAAKxC,GACxCS,EAAMyC,QAAU,CAACE,KAAM3C,EAAMyC,QAASC,KAAMnD,GAAWgC,EAAOsB,SAAU7C,EAAM6C,WAC5D,UAAVK,GAAsB,WAAWnB,KAAKxC,KAAaS,EAAMyC,QAAQE,OACzE3C,EAAMyC,QAAUzC,EAAMyC,QAAQE,MAE5B5C,EAAOO,QACTN,EAAM+C,cAA4B,MAAXxD,GAA4B,YAATgC,GACrCA,GAGTgC,OAAQ,SAASvD,EAAOwD,GACtB,GAAIxD,EAAMC,SAASD,EAAMC,SAASX,OAAO,IAAMa,EAAW,OAAOrB,EAAW2E,KAC5E,IAAIC,EAAYF,GAAaA,EAAUG,OAAO,GAC1CC,EAAK5D,EAAMyC,QACXoB,EAASD,EAAGlB,MAAQ9C,EAAQ8D,IACnB,WAAXE,EAAGlB,MAAqB,0CAA0CX,KAAKyB,GACzE,OAAOI,EAAGf,UAAYgB,EAAS,EAAI7E,EAAO8D,aACvC9C,EAAM+C,cAAgB/D,EAAO8D,WAAa,IAG/CgB,cAAe,oCACfC,YAAa,IACbC,KAAM,aAIVlF,EAAWmF,WAAW,cAAe,QAlSjCC,CAAIC,EAAQ,K,oBCKb,SAASrF,GACZ,aAGEA,EAAWC,WAAW,QAAQ,SAASC,GACrC,IAAIoF,EAAWtF,EAAWuF,QAAQrF,EAAQ,CAACsF,KAAM,cAC7CC,EAAWzF,EAAWuF,QAAQrF,EAAQ,QAE1C,SAASwF,EAAYC,GACnB,OAAO,SAAS1E,EAAQC,GAEtB,OADSD,EAAOqC,QACNqC,GAA+C,GAAnCzE,EAAM0E,UAAUzE,SAASX,QAE7CS,EAAOc,OACPb,EAAMC,SAAW0E,EACV,qBAEAC,EAAK7E,EAAQC,IAK1B,SAAS4E,EAAK7E,EAAQC,GACpB,OAAID,EAAOM,MAAM,OACfN,EAAO6B,YACA,WAEF2C,EAASvB,MAAMjD,EAAQC,EAAM0E,WAGtC,SAASC,EAAK5E,EAAQC,GACpB,IAAIY,EAAKb,EAAOqC,OAIhB,GAAiC,WAA7BpC,EAAM6E,cAActD,OAClBvB,EAAM6C,SAAW7C,EAAM6E,cAAchC,SAEvC,OADA9C,EAAO6B,YACA,cAIX,GAAI5B,EAAM8E,YAAa,CACrB,GAAU,KAANlE,GAAab,EAAOM,MAAM,MAE5B,OADAN,EAAO6B,YACA,MACF,GAAI7B,EAAOM,MAAM,gBAEtB,OADAL,EAAMC,SAAW2E,EACV,UACF,GAAI7E,EAAOM,MAAM,YACtB,MAAO,UACF,GAAU,KAANO,EAET,OADAb,EAAO6B,YACA,UAIX,IAAI5B,EAAM8E,aAA4C,WAA7B9E,EAAM6E,cAActD,SAChC,KAANX,GAAmB,KAANA,GAEhB,OADAb,EAAOM,MAAM,aACN,gBAKX,GAAIL,EAAM8E,cAAgB/E,EAAOM,MAAM,UAAO,KAAiB,KAANO,GAAmB,KAANA,GAEpE,OADAZ,EAAMC,SAAW2E,EACV5E,EAAMC,SAASF,EAAQC,GAGhC,GAAiC,WAA7BA,EAAM6E,cAActD,OACS,qBAA7BvB,EAAM6E,cAActD,OACS,iBAA7BvB,EAAM6E,cAActD,MAA0B,CAChD,GAAU,KAANX,EAEF,OADAZ,EAAMC,SAAWuE,EAAY,KACtBxE,EAAMC,SAASF,EAAQC,GACzB,GAAU,KAANY,IACJb,EAAOM,MAAM,UAEhB,OADAL,EAAMC,SAAWuE,EAAY,KACtBxE,EAAMC,SAASF,EAAQC,GAKpC,OAAOoE,EAASpB,MAAMjD,EAAQC,EAAM+E,WAGtC,MAAO,CAELnC,WAAY,WAGV,MAAO,CACLmC,UAHcjG,EAAW8D,WAAWwB,GAIpCM,UAHc5F,EAAW8D,WAAW2B,GAIpC1B,SAAU,EACVgC,cAAe,CAAEtD,MAAO,KAAMsB,SAAU,GACxC5C,SAAU0E,IAIdK,UAAW,SAAShF,GAClB,MAAO,CACL+E,UAAYjG,EAAWkG,UAAUZ,EAAUpE,EAAM+E,WACjDL,UAAW5F,EAAWkG,UAAUT,EAAUvE,EAAM0E,WAChD7B,SAAU7C,EAAM6C,SAChBgC,cAAe7E,EAAM6E,cACrB5E,SAAUD,EAAMC,WAIpB+C,MAAO,SAASjD,EAAQC,GAKtB,GAJID,EAAOK,QACTJ,EAAM6C,SAAW9C,EAAOkD,cACxBjD,EAAM8E,aAAc,GAElB/E,EAAOS,WAAY,OAAO,KAC9B,IAAIe,EAAQvB,EAAMC,SAASF,EAAQC,GASnC,GARAA,EAAM8E,aAAc,EAGhBvD,GAAkB,eAATA,IACXvB,EAAM6E,cAAgB,CAAEtD,MAAOA,EAAOsB,SAAU7C,EAAM6C,WAIpD9C,EAAOO,OAASN,EAAMC,UAAY2E,EAAM,CAC1C7E,EAAOsB,OAAO,GACd,IAAIT,EAAKb,EAAOqC,OAChBrC,EAAOc,OACHD,GAAY,KAANA,IACRZ,EAAMC,SAAW0E,GAarB,MATa,WAATpD,EACFA,EAAQ,MACU,eAATA,EACTA,EAAQ,UACU,iBAATA,EACTA,EAAQ,YACU,qBAATA,IACTA,EAAQ,MAEHA,MAGV,YAAa,QAEhBzC,EAAWmF,WAAW,cAAe,QA1JnCC,CAAIC,EAAQ,GAAyBA,EAAQ,GAA2BA,EAAQ","file":"static/js/19.301627d5.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"ruby\", function(config) {\n  function wordObj(words) {\n    var o = {};\n    for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n    return o;\n  }\n  var keywords = wordObj([\n    \"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\",\n    \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\",\n    \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\",\n    \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\",\n    \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\",\n    \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"\n  ]);\n  var indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\", \"then\",\n                             \"catch\", \"loop\", \"proc\", \"begin\"]);\n  var dedentWords = wordObj([\"end\", \"until\"]);\n  var opening = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\"};\n  var closing = {\"]\": \"[\", \"}\": \"{\", \")\": \"(\"};\n  var curPunc;\n\n  function chain(newtok, stream, state) {\n    state.tokenize.push(newtok);\n    return newtok(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n      state.tokenize.push(readBlockComment);\n      return \"comment\";\n    }\n    if (stream.eatSpace()) return null;\n    var ch = stream.next(), m;\n    if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n      return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n    } else if (ch == \"/\") {\n      if (regexpAhead(stream))\n        return chain(readQuoted(ch, \"string-2\", true), stream, state);\n      else\n        return \"operator\";\n    } else if (ch == \"%\") {\n      var style = \"string\", embed = true;\n      if (stream.eat(\"s\")) style = \"atom\";\n      else if (stream.eat(/[WQ]/)) style = \"string\";\n      else if (stream.eat(/[r]/)) style = \"string-2\";\n      else if (stream.eat(/[wxq]/)) { style = \"string\"; embed = false; }\n      var delim = stream.eat(/[^\\w\\s=]/);\n      if (!delim) return \"operator\";\n      if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n      return chain(readQuoted(delim, style, embed, true), stream, state);\n    } else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n      return chain(readHereDoc(m[2], m[1]), stream, state);\n    } else if (ch == \"0\") {\n      if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);\n      else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);\n      else stream.eatWhile(/[0-7]/);\n      return \"number\";\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n      return \"number\";\n    } else if (ch == \"?\") {\n      while (stream.match(/^\\\\[CM]-/)) {}\n      if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);\n      else stream.next();\n      return \"string\";\n    } else if (ch == \":\") {\n      if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n      if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state);\n\n      // :> :>> :< :<< are valid symbols\n      if (stream.eat(/[\\<\\>]/)) {\n        stream.eat(/[\\<\\>]/);\n        return \"atom\";\n      }\n\n      // :+ :- :/ :* :| :& :! are valid symbols\n      if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n        return \"atom\";\n      }\n\n      // Symbols can't start by a digit\n      if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n        stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n        // Only one ? ! = is allowed and only as the last character\n        stream.eat(/[\\?\\!\\=]/);\n        return \"atom\";\n      }\n      return \"operator\";\n    } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n      stream.eat(\"@\");\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      return \"variable-2\";\n    } else if (ch == \"$\") {\n      if (stream.eat(/[a-zA-Z_]/)) {\n        stream.eatWhile(/[\\w]/);\n      } else if (stream.eat(/\\d/)) {\n        stream.eat(/\\d/);\n      } else {\n        stream.next(); // Must be a special global like $: or $!\n      }\n      return \"variable-3\";\n    } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      stream.eat(/[\\?\\!]/);\n      if (stream.eat(\":\")) return \"atom\";\n      return \"ident\";\n    } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n      curPunc = \"|\";\n      return null;\n    } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    } else if (ch == \"-\" && stream.eat(\">\")) {\n      return \"arrow\";\n    } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n      var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n      if (ch == \".\" && !more) curPunc = \".\";\n      return \"operator\";\n    } else {\n      return null;\n    }\n  }\n\n  function regexpAhead(stream) {\n    var start = stream.pos, depth = 0, next, found = false, escaped = false\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (\"[{(\".indexOf(next) > -1) {\n          depth++\n        } else if (\"]})\".indexOf(next) > -1) {\n          depth--\n          if (depth < 0) break\n        } else if (next == \"/\" && depth == 0) {\n          found = true\n          break\n        }\n        escaped = next == \"\\\\\"\n      } else {\n        escaped = false\n      }\n    }\n    stream.backUp(stream.pos - start)\n    return found\n  }\n\n  function tokenBaseUntilBrace(depth) {\n    if (!depth) depth = 1;\n    return function(stream, state) {\n      if (stream.peek() == \"}\") {\n        if (depth == 1) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length-1](stream, state);\n        } else {\n          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n        }\n      } else if (stream.peek() == \"{\") {\n        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n      }\n      return tokenBase(stream, state);\n    };\n  }\n  function tokenBaseOnce() {\n    var alreadyCalled = false;\n    return function(stream, state) {\n      if (alreadyCalled) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      }\n      alreadyCalled = true;\n      return tokenBase(stream, state);\n    };\n  }\n  function readQuoted(quote, style, embed, unescaped) {\n    return function(stream, state) {\n      var escaped = false, ch;\n\n      if (state.context.type === 'read-quoted-paused') {\n        state.context = state.context.prev;\n        stream.eat(\"}\");\n      }\n\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && (unescaped || !escaped)) {\n          state.tokenize.pop();\n          break;\n        }\n        if (embed && ch == \"#\" && !escaped) {\n          if (stream.eat(\"{\")) {\n            if (quote == \"}\") {\n              state.context = {prev: state.context, type: 'read-quoted-paused'};\n            }\n            state.tokenize.push(tokenBaseUntilBrace());\n            break;\n          } else if (/[@\\$]/.test(stream.peek())) {\n            state.tokenize.push(tokenBaseOnce());\n            break;\n          }\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return style;\n    };\n  }\n  function readHereDoc(phrase, mayIndent) {\n    return function(stream, state) {\n      if (mayIndent) stream.eatSpace()\n      if (stream.match(phrase)) state.tokenize.pop();\n      else stream.skipToEnd();\n      return \"string\";\n    };\n  }\n  function readBlockComment(stream, state) {\n    if (stream.sol() && stream.match(\"=end\") && stream.eol())\n      state.tokenize.pop();\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: [tokenBase],\n              indented: 0,\n              context: {type: \"top\", indented: -config.indentUnit},\n              continuedLine: false,\n              lastTok: null,\n              varList: false};\n    },\n\n    token: function(stream, state) {\n      curPunc = null;\n      if (stream.sol()) state.indented = stream.indentation();\n      var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;\n      var thisTok = curPunc;\n      if (style == \"ident\") {\n        var word = stream.current();\n        style = state.lastTok == \".\" ? \"property\"\n          : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n          : /^[A-Z]/.test(word) ? \"tag\"\n          : (state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList) ? \"def\"\n          : \"variable\";\n        if (style == \"keyword\") {\n          thisTok = word;\n          if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";\n          else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";\n          else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation())\n            kwtype = \"indent\";\n          else if (word == \"do\" && state.context.indented < state.indented)\n            kwtype = \"indent\";\n        }\n      }\n      if (curPunc || (style && style != \"comment\")) state.lastTok = thisTok;\n      if (curPunc == \"|\") state.varList = !state.varList;\n\n      if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc))\n        state.context = {prev: state.context, type: curPunc || style, indented: state.indented};\n      else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev)\n        state.context = state.context.prev;\n\n      if (stream.eol())\n        state.continuedLine = (curPunc == \"\\\\\" || style == \"operator\");\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize[state.tokenize.length-1] != tokenBase) return CodeMirror.Pass;\n      var firstChar = textAfter && textAfter.charAt(0);\n      var ct = state.context;\n      var closed = ct.type == closing[firstChar] ||\n        ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n      return ct.indented + (closed ? 0 : config.indentUnit) +\n        (state.continuedLine ? config.indentUnit : 0);\n    },\n\n    electricInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-ruby\", \"ruby\");\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\n  // full haml mode. This handled embedded ruby and html fragments too\n  CodeMirror.defineMode(\"haml\", function(config) {\n    var htmlMode = CodeMirror.getMode(config, {name: \"htmlmixed\"});\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n\n    function rubyInQuote(endQuote) {\n      return function(stream, state) {\n        var ch = stream.peek();\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function html(stream, state) {\n      var ch = stream.peek();\n\n      // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n      if (state.previousToken.style == \"comment\" ) {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\" ) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if ( ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      }\n\n      // donot handle --> as valid ruby, make it HTML close comment instead\n      if (state.startOfLine && !stream.match(\"-->\", false) && (ch == \"=\" || ch == \"-\" )) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n\n      if (state.previousToken.style == \"hamlTag\" ||\n          state.previousToken.style == \"closeAttributeTag\" ||\n          state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          if (!stream.match(/^\\{%.*/)) {\n            state.tokenize = rubyInQuote(\"}\");\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n\n      return htmlMode.token(stream, state.htmlState);\n    }\n\n    return {\n      // default to html mode\n      startState: function() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: { style: null, indented: 0},\n          tokenize: html\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          htmlState : CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n\n      token: function(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false;\n        // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n        if (style && style != \"commentLine\") {\n          state.previousToken = { style: style, indented: state.indented };\n        }\n        // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        }\n        // reprocess some of the specific style tag when finish setting previousToken\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});\n"],"sourceRoot":""}